extends ../layout

block append css
    link(rel='stylesheet', href='/stylesheets/section.css')

block append header
    div.right
        span #{user._id}
        a.btn.btn-info.btn-sm(href='/users/signout')
            span.fa.fa-sign-out
            span Log out

block content
    div#wishes
        wish-item(v-for="wish in selectedWishes" v-bind:wish="wish" v-on:new_current_wish="newCurrentWish")
        currentwish-item(v-bind:currentwish="currentWish" v-on:new_name="searchProducts(currentWish)")
        products-item(v-for="(product, productKey, productIndex) in currentWish.matchingProducts" v-if="productIndex < maxProducts" v-bind:maxProducts="maxProducts" v-bind:wish="currentWish" v-bind:productkey="productKey" v-bind:product="product" v-on:select_product="bindCurrentWishWithProduct")

    a(href='/wishlist')
        button.btn.btn-primary.left(type="button") Revenir à la wishlist
           
    a(href='/basket')
        button.btn.btn-success.right(type="button") Passer au panier

block append script
    script.
        function getFirstSelectedWish(){
            //on parcours le tableau ordonné pour chercher si le wish est dans l'objet pSelectedWishes
            var psw = pSelectedWishes;
            var wgs = wishGroups;
            for(var i = 0; i < wgs.length; i++ ) {
                var wg = wgs[i];
                var wgLength = wg.wishes?wg.wishes.length:0;
                for(var j = 0; j < wgLength; j++ ) {
                    var wish = wg.wishes[j];
                    var selected = psw[wg.id]?psw[wg.id][wish.id]?true:false:false;
                    if( selected ) {
                        return wish;
                    }
                }
            }
        }
        function getCurrentWishEntity( pCurrentWish ){
            //si le wish courant existe et est dans le tableau de wish selectionné, alors on le renvoi. Dans les autres cas on renvoi le premier element selectionné.
            var pcw = pCurrentWish;
            var psw = pSelectedWishes;
            var wgs = wishGroups;
            if ( pcw ) {
                var cwIsSelected = psw[pcw.group]?psw[pcw.group][pcw.wish]?true:false:false;
                if ( cwIsSelected ) {
                    for(var i = 0; i < wgs.length; i++ ) {
                        var wg = wgs[i]; // wishGroup
                        var wgLength = wg.wishes?wg.wishes.length:0;
                        for(var j = 0; j < wgLength; j++ ) {
                            var w = wg.wishes[j]; // wish
                            var selected = psw[wg.id]?psw[wg.id][w.id]?true:false:false;
                            if( w.groupId == pcw.groupId && w.id == pcw.wish ) {
                                return w;
                            }
                        }
                    }
                }
            }
            return getFirstSelectedWish();
        }

        //add some usefull fields for vuejs to watch them
        //productsPids(pour l'appel) et productsToMatch(pour la reponse) sont les listes des produits à chercher avec leur pid puis rattacher aux wishes
        //on change le champ product en objet pour qu'il comprenne les productsInfos et l'id
        var wishGroups = JSON.parse('#{ wishGroups }'.replace(/&quot;/g,'"'));
        var pSelectedWishes = JSON.parse('#{ pSelectedWishes }'.replace(/&quot;/g,'"'));
        var productsToMatch = [];
        var productsPids = [];
        var psw = pSelectedWishes;
        var wgs = wishGroups;
        var wgsLength = wgs.length;
        for(var i = 0; i < wgsLength; i++ ) {
            var wg = wgs[i]; // wishGroup
            var wgLength = wg.wishes?wg.wishes.length:0;
            for(var j = 0; j < wgLength; j++ ) {
                var w = wgs[i].wishes[j]; // wish
                w.product = {id:w.product, infos:{}, quantity : 0};
                w.matchingProducts = [];
                var selected = psw[wg.id]?psw[wg.id][w.id]?true:false:false;
                if( selected && psw[wg.id][w.id].product && psw[wg.id][w.id].product.id) {
                    var productId = psw[wg.id][w.id].product.id;
                    productsToMatchAlreadyExist = productsToMatch.hasOwnProperty(productId);
                    if ( !productsToMatchAlreadyExist ) {
                        productsToMatch[productId] = [{ groupPosition:i, wishPosition:j }];
                    }else{
                        productsToMatch[productId].push({ groupPosition:i, wishPosition:j });
                    }
                    productsPids.push( productId );
                }
            }
        }
        $.ajax({
            type: 'GET',
            url : '/products/details/',
            data: { pids :JSON.stringify(productsPids)},
            complete: function(responseObject) {
                var retreivedProducts = responseObject.responseJSON;
                try {
                    for(var product in productsToMatch) {
                        var infos = retreivedProducts[product];
                        for(var wishIndex in productsToMatch[product]) {
                            var wish = productsToMatch[product][wishIndex];
                            wishGroups[wish.groupPosition].wishes[wish.wishPosition].product.infos = infos;
                        }
                    }
                    //- console.log(products);
                } catch (e) {
                    console.log('une erreur à la recuperation des details est survenue : ' +e)
                }
                
                 
                //- self.currentWish.products = products;
                //- self.maxProducts++;
            }
        });

        // pCurrentWish is partial current wish, it is an object with group id and wish id
        pCurrentWish = JSON.parse('#{ pCurrentWish }'.replace(/&quot;/g,'"'));
        var currentWish = getCurrentWishEntity( pCurrentWish );

        //maximum produits affiché sur la page
        var maxProducts = 20;
    script(src="/javascripts/section.js")